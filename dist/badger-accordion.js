!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?module.exports=e():"function"==typeof define&&define.amd?define(e):t.BadgerAccordion=e()}(this,function(){"use strict";!function(t,e){var n=(t.body||t.documentElement).style,i="",s="";""==n.WebkitAnimation&&(i="-webkit-"),""==n.MozAnimation&&(i="-moz-"),""==n.OAnimation&&(i="-o-"),""==n.WebkitTransition&&(s="-webkit-"),""==n.MozTransition&&(s="-moz-"),""==n.OTransition&&(s="-o-"),Object.prototype.onCSSAnimationEnd=function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitAnimationEnd",e),this.addEventListener("mozAnimationEnd",e),this.addEventListener("oAnimationEnd",e),this.addEventListener("oanimationend",e),this.addEventListener("animationend",e),(""!=i||"animation"in n)&&"0s"!=getComputedStyle(this)[i+"animation-duration"]||t(),this},Object.prototype.onCSSTransitionEnd=function(t){var e=function e(n){t(),n.target.removeEventListener(n.type,e)};return this.addEventListener("webkitTransitionEnd",e),this.addEventListener("mozTransitionEnd",e),this.addEventListener("oTransitionEnd",e),this.addEventListener("transitionend",e),this.addEventListener("transitionend",e),(""!=s||"transition"in n)&&"0s"!=getComputedStyle(this)[s+"transition-duration"]||t(),this}}(document,window);var t=function(){function t(t,e){for(var n=0;n<e.length;n++){var i=e[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(t,i.key,i)}}return function(e,n,i){return n&&t(e.prototype,n),i&&t(e,i),e}}();return function(){function e(t,n){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var i=document.querySelector(t);if(null!=i){this.settings=Object.assign({},{headerClass:".js-badger-accordion-header",panelClass:".js-badger-accordion-panel",panelInnerClass:".js-badger-accordion-panel-inner",hidenClass:"is-hidden",initalisedClass:"badger-accordion--initalised",headerDataAttr:"data-badger-accordion-header-id",openMultiplePanels:!1,openHeadersOnLoad:[],headerOpenLabel:"Open accordion panel",headerCloseLabel:"Close accordion panel"},n),this.container=i,this.headers=Array.from(this.container.querySelectorAll(this.settings.headerClass)),this.panels=Array.from(this.container.querySelectorAll(this.settings.panelClass)),this.toggleEl=void 0!==this.settings.toggleEl?Array.from(this.container.querySelectorAll(this.settings.toggleEl)):this.headers,this.states=[].map.call(this.headers,function(){return{state:"closed"}}),this.ids=[].map.call(this.headers,function(){return{id:Math.floor(1e6*Math.random()+1)}}),this.toggling=!1,this.container?this.init():console.log("Something is wrong with you markup...")}}return t(e,[{key:"init",value:function(){this._setupAttributes(),this._initalState(),this._setPanelHeight(),this._insertDataAttrs(),this._addListeners(),this._finishInitalisation()}},{key:"_initalState",value:function(){var t=this.settings.openHeadersOnLoad;t.length&&this._openHeadersOnLoad(t),this._renderDom()}},{key:"_insertDataAttrs",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute(t.settings.headerDataAttr,n)})}},{key:"_finishInitalisation",value:function(){this.container.classList.add(this.settings.initalisedClass)}},{key:"_addListeners",value:function(){var t=this;this.headers.forEach(function(e,n){e.addEventListener("click",function(){t.handleClick(e,n)})})}},{key:"handleClick",value:function(t,e){var n=this.settings.headerClass.substr(1);t.classList.contains(n)&&!1===this.toggling&&(this.toggling=!0,this.setState(e),this._renderDom())}},{key:"setState",value:function(t){var e=this,n=this.getState();this.settings.openMultiplePanels||n.filter(function(e,n){n!=t&&(e.state="closed")}),n.filter(function(n,i){if(i==t){var s=e.toggleState(n.state);return n.state=s}})}},{key:"_renderDom",value:function(){var t=this;this.states.filter(function(e,n){"open"===e.state&&t.open(n)}),this.states.filter(function(e,n){"closed"===e.state&&t.close(n)})}},{key:"open",value:function(t){this.togglePanel("open",t)}},{key:"close",value:function(t){this.togglePanel("closed",t)}},{key:"openAll",value:function(){var t=this;this.headers.forEach(function(e){t.togglePanel("open",e)})}},{key:"closeAll",value:function(){var t=this;this.headers.forEach(function(e){t.togglePanel("closed",e)})}},{key:"togglePanel",value:function(t,e){var n=this;if(void 0!==t&&void 0!==e)if("closed"===t){var i=this.headers[e],s=this.panels[e];s.classList.add(this.settings.hidenClass),i.setAttribute("aria-expanded",!1),i.setAttribute("aria-label",this.settings.headerOpenLabel),s.onCSSTransitionEnd(function(){return n.toggling=!1})}else if("open"===t){var a=this.headers[e],r=this.panels[e];r.classList.remove(this.settings.hidenClass),a.setAttribute("aria-expanded",!0),a.setAttribute("aria-label",this.settings.headerCloseLabel),r.onCSSTransitionEnd(function(){return n.toggling=!1})}}},{key:"getState",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(e.length&&Array.isArray(e)){return e.map(function(e){return t.states[e]})}return this.states}},{key:"toggleState",value:function(t){if(void 0!==t)return"closed"===t?"open":"closed"}},{key:"_openHeadersOnLoad",value:function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[];if(e.length&&Array.isArray(e)){e.filter(function(t){return void 0!=t}).forEach(function(e){return t.states[e].state="open"})}}},{key:"_setPanelHeight",value:function(){var t=this;this.panels.forEach(function(e){var n=e.querySelector(t.settings.panelInnerClass).offsetHeight;return e.style.maxHeight=n+"px"})}},{key:"_setupHeaders",value:function(){var t=this;this.headers.forEach(function(e,n){e.setAttribute("id","badger-accordion-header-"+t.ids[n].id),e.setAttribute("aria-controls","badger-accordion-panel-"+t.ids[n].id),e.setAttribute("aria-label",t.settings.headerOpenLabel)})}},{key:"_setupPanels",value:function(){var t=this;this.panels.forEach(function(e,n){e.setAttribute("id","badger-accordion-panel-"+t.ids[n].id),e.setAttribute("aria-labeledby","badger-accordion-header-"+t.ids[n].id)})}},{key:"_setupAttributes",value:function(){this._setupHeaders(),this._setupPanels(),this._insertDataAttrs()}}]),e}()});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
